{"created": 1750702967.507454, "duration": 27.70163607597351, "exitcode": 1, "root": "/Users/sokov/WebstormProjects/autotesting", "environment": {}, "summary": {"failed": 3, "passed": 1, "total": 4, "collected": 4}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Dir"}]}, {"nodeid": "tests/test_auth.py", "outcome": "passed", "result": [{"nodeid": "tests/test_auth.py::test_login", "type": "Function", "lineno": 39}, {"nodeid": "tests/test_auth.py::test_login_invalid_credentials", "type": "Function", "lineno": 97}, {"nodeid": "tests/test_auth.py::test_trying_counter", "type": "Function", "lineno": 160}]}, {"nodeid": "tests/test_languages.py", "outcome": "passed", "result": [{"nodeid": "tests/test_languages.py::test_language_switch", "type": "Function", "lineno": 21}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/test_auth.py", "type": "Module"}, {"nodeid": "tests/test_languages.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/test_auth.py::test_login", "lineno": 39, "outcome": "failed", "keywords": ["test_login", "test_auth.py", "tests", "autotesting", ""], "setup": {"duration": 1.630159541964531, "outcome": "passed"}, "call": {"duration": 6.749798665987328, "outcome": "failed", "crash": {"path": "/Users/sokov/WebstormProjects/autotesting/tests/test_auth.py", "lineno": 35, "message": "Failed: \u00fa\u010det bude zablokovan\u00fd: '\u00fa\u010det bude zablokovan\u00fd e\u0161te 16 min.'"}, "traceback": [{"path": "tests/test_auth.py", "lineno": 83, "message": ""}, {"path": "tests/test_auth.py", "lineno": 35, "message": "Failed"}], "longrepr": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"43f7cff3f9839552719acd668483d08a\")>\n\n    def test_login(driver):\n        \"\"\"\n        Testovacia pr\u00edpadov\u00e1 \u0161t\u00fadia: Prihl\u00e1senie s platn\u00fdmi \u00fadajmi\n    \n        Cie\u013e:\n            Overi\u0165, \u017ee pou\u017e\u00edvate\u013e sa \u00faspe\u0161ne prihl\u00e1si s platn\u00fdmi prihlasovac\u00edmi \u00fadajmi.\n    \n        Kroky:\n            1. Otvori\u0165 prihlasovaciu str\u00e1nku.\n            2. Zada\u0165 pou\u017e\u00edvate\u013esk\u00e9 meno a heslo.\n            3. Klikn\u00fa\u0165 na tla\u010didlo \u201ePrihl\u00e1si\u0165\u201c.\n    \n        O\u010dak\u00e1van\u00fd v\u00fdsledok:\n            - Pou\u017e\u00edvate\u013e je presmerovan\u00fd na Dashboard.\n            - Titulok str\u00e1nky je \u201eDashboard | Demo\u201c.\n        \"\"\"\n    \n        # Otvorenie str\u00e1nky\n        driver.get(BASE_URL)\n        # \u010cak\u00e1me a\u017e 10 sek\u00fand, k\u00fdm nenastane po\u017eadovan\u00e1 podmienka. Ak nastane sk\u00f4r \u2014 ideme \u010falej,\n        # ak nie \u2014 nastane chyba TimeoutException.\n        wait = WebDriverWait(driver, 10)\n    \n        # O\u010dak\u00e1vanie, \u017ee pole pre vstup je dostupn\u00e9\n        login_input = wait.until(EC.visibility_of_element_located(LOGIN_FIELD_LOCATOR))\n        assert login_input.is_enabled(), \"Login input is not enabled\"\n        # Zadanie prihlasovacieho mena\n        login_input.send_keys(LOGIN)\n        # Kontrola, \u017ee hodnoty s\u00fa rovnak\u00e9\n        assert login_input.get_attribute(\"value\") == LOGIN, \"Login input value mismatch\"\n    \n        # O\u010dak\u00e1vanie, \u017ee pole pre zadanie je k dispoz\u00edcii\n        password_input = wait.until(EC.visibility_of_element_located(PASSWORD_FIELD_LOCATOR))\n        assert password_input.is_enabled(), \"Password input is not enabled\"\n        # Zadanie hesla\n        password_input.send_keys(PASSWORD)\n        # Kontrola, \u017ee hodnoty s\u00fa rovnak\u00e9\n        assert password_input.get_attribute(\"value\") == PASSWORD, \"Password input value mismatch\"\n    \n        # O\u010dak\u00e1vanie, \u017ee tla\u010didlo je klikate\u013en\u00e9 a kliknutie na tla\u010didlo prihl\u00e1senia\n        submit_button = wait.until(EC.element_to_be_clickable(SUBMIT_BUTTON_LOCATOR))\n        submit_button.click()\n    \n>       check_account_blocked(wait)\n\ntests/test_auth.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nwait = <selenium.webdriver.support.wait.WebDriverWait (session=\"43f7cff3f9839552719acd668483d08a\")>\n\n    def check_account_blocked(wait):\n        try:\n            # Kontrola dostupnosti chybov\u00fdch spr\u00e1v\n            error_message = wait.until(EC.visibility_of_element_located(ERROR_MESSAGE_LOCATOR))\n            # Zobraz\u00ed sa kontrola, \u010di je spr\u00e1va na popup\n            message_text = error_message.text.strip().lower()\n            # Skontrolujte, \u010di sa spr\u00e1va zhoduje s o\u010dak\u00e1van\u00fdmi\n            if \"\u00fa\u010det bude zablokovan\u00fd\" in message_text:\n>               pytest.fail(f\"\u00fa\u010det bude zablokovan\u00fd: '{message_text}'\")\nE               Failed: \u00fa\u010det bude zablokovan\u00fd: '\u00fa\u010det bude zablokovan\u00fd e\u0161te 16 min.'\n\ntests/test_auth.py:35: Failed"}, "teardown": {"duration": 0.07546445797197521, "outcome": "passed"}}, {"nodeid": "tests/test_auth.py::test_login_invalid_credentials", "lineno": 97, "outcome": "failed", "keywords": ["test_login_invalid_credentials", "test_auth.py", "tests", "autotesting", ""], "setup": {"duration": 0.5049421250005253, "outcome": "passed"}, "call": {"duration": 7.690392457996495, "outcome": "failed", "crash": {"path": "/Users/sokov/WebstormProjects/autotesting/tests/test_auth.py", "lineno": 35, "message": "Failed: \u00fa\u010det bude zablokovan\u00fd: '\u00fa\u010det bude zablokovan\u00fd e\u0161te 16 min.'"}, "traceback": [{"path": "tests/test_auth.py", "lineno": 140, "message": ""}, {"path": "tests/test_auth.py", "lineno": 35, "message": "Failed"}], "longrepr": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1afb5920fc7cfa3655960e0c96536c4e\")>\n\n    def test_login_invalid_credentials(driver):\n        \"\"\"\n        Testovacia pr\u00edpadov\u00e1 \u0161t\u00fadia: Neplatn\u00e9 prihlasovacie \u00fadaje\n    \n        Cie\u013e:\n            Overi\u0165, \u017ee pri zadan\u00ed nespr\u00e1vnych \u00fadajov sa zobraz\u00ed chybov\u00e9 hl\u00e1senie a pou\u017e\u00edvate\u013e zostane na prihlasovacej str\u00e1nke.\n    \n        Kroky:\n            1. Otvori\u0165 prihlasovaciu str\u00e1nku.\n            2. Zada\u0165 neplatn\u00e9 pou\u017e\u00edvate\u013esk\u00e9 meno a heslo.\n            3. Klikn\u00fa\u0165 na tla\u010didlo \u201ePrihl\u00e1si\u0165\u201c.\n    \n        O\u010dak\u00e1van\u00fd v\u00fdsledok:\n            - Pou\u017e\u00edvate\u013e zostane na prihlasovacej str\u00e1nke.\n            - Zobraz\u00ed sa hl\u00e1senie s textom \u201eZadali ste nespr\u00e1vne meno alebo heslo\u201c.\n        \"\"\"\n    \n    \n        driver.get(BASE_URL)\n        wait = WebDriverWait(driver, 10)\n        EXPECTED_URL_AFTER_WRONG_DATA = \"https://demo.biometric.sk/Pages/Account/Login?ReturnUrl=%2fPages%2fDashboard\"\n    \n        # O\u010dak\u00e1vanie, \u017ee pole pre vstup je dostupn\u00e9\n        login_input = wait.until(EC.visibility_of_element_located(LOGIN_FIELD_LOCATOR))\n        assert login_input.is_enabled(), \"Login input is not enabled\"\n        # Zadanie prihlasovacieho mena\n        login_input.send_keys(LOGIN)\n        # Kontrola, \u017ee hodnoty s\u00fa rovnak\u00e9\n        assert login_input.get_attribute(\"value\") == LOGIN, \"Login input value mismatch\"\n    \n        # O\u010dak\u00e1vanie, \u017ee pole pre zadanie je k dispoz\u00edcii\n        password_input = wait.until(EC.visibility_of_element_located(PASSWORD_FIELD_LOCATOR))\n        assert password_input.is_enabled(), \"Password input is not enabled\"\n        # Zadanie nespr\u00e1vneho hesla\n        password_input.send_keys(INVALID_PASSWORD)\n        # Kontrola, \u017ee hodnoty s\u00fa rovnak\u00e9\n        assert password_input.get_attribute(\"value\") == INVALID_PASSWORD, \"Password input value mismatch\"\n    \n        # Pok\u00fas o prihl\u00e1senie\n        submit_button = wait.until(EC.element_to_be_clickable(SUBMIT_BUTTON_LOCATOR))\n        submit_button.click()\n    \n>       check_account_blocked(wait)\n\ntests/test_auth.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nwait = <selenium.webdriver.support.wait.WebDriverWait (session=\"1afb5920fc7cfa3655960e0c96536c4e\")>\n\n    def check_account_blocked(wait):\n        try:\n            # Kontrola dostupnosti chybov\u00fdch spr\u00e1v\n            error_message = wait.until(EC.visibility_of_element_located(ERROR_MESSAGE_LOCATOR))\n            # Zobraz\u00ed sa kontrola, \u010di je spr\u00e1va na popup\n            message_text = error_message.text.strip().lower()\n            # Skontrolujte, \u010di sa spr\u00e1va zhoduje s o\u010dak\u00e1van\u00fdmi\n            if \"\u00fa\u010det bude zablokovan\u00fd\" in message_text:\n>               pytest.fail(f\"\u00fa\u010det bude zablokovan\u00fd: '{message_text}'\")\nE               Failed: \u00fa\u010det bude zablokovan\u00fd: '\u00fa\u010det bude zablokovan\u00fd e\u0161te 16 min.'\n\ntests/test_auth.py:35: Failed"}, "teardown": {"duration": 0.07509424997260794, "outcome": "passed"}}, {"nodeid": "tests/test_auth.py::test_trying_counter", "lineno": 160, "outcome": "failed", "keywords": ["test_trying_counter", "test_auth.py", "tests", "autotesting", ""], "setup": {"duration": 0.5065262500429526, "outcome": "passed"}, "call": {"duration": 3.09805333300028, "outcome": "failed", "crash": {"path": "/Users/sokov/WebstormProjects/autotesting/tests/test_auth.py", "lineno": 35, "message": "Failed: \u00fa\u010det bude zablokovan\u00fd: '\u00fa\u010det bude zablokovan\u00fd e\u0161te 16 min.'"}, "traceback": [{"path": "tests/test_auth.py", "lineno": 197, "message": ""}, {"path": "tests/test_auth.py", "lineno": 35, "message": "Failed"}], "longrepr": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1c2a1025a3d946a9d638b859ee0c37b6\")>\n\n    def test_trying_counter(driver):\n        \"\"\"\n        EXTRA TEST\n        Testovacia pr\u00edpadov\u00e1 \u0161t\u00fadia: Po\u010det zost\u00e1vaj\u00facich pokusov\n    \n        Cie\u013e:\n            Overi\u0165, \u017ee pri ka\u017edom ne\u00faspe\u0161nom prihl\u00e1sen\u00ed sa po\u010det zost\u00e1vaj\u00facich pokusov zni\u017euje.\n    \n        Kroky:\n            1. Otvori\u0165 prihlasovaciu str\u00e1nku.\n            2. Zada\u0165 platn\u00e9 meno a neplatn\u00e9 heslo.\n            3. Opakova\u0165 prihl\u00e1senie viackr\u00e1t.\n            4. \u010c\u00edta\u0165 text z hl\u00e1senia a overi\u0165 zni\u017eovanie po\u010dtu pokusov.\n    \n        O\u010dak\u00e1van\u00fd v\u00fdsledok:\n            - Text \u201eZost\u00e1vaj\u00faci po\u010det pokusov: N\u201c sa objav\u00ed a N sa zni\u017euje o 1 pri ka\u017edom pokuse.\n        \"\"\"\n        driver.get(BASE_URL)\n        wait = WebDriverWait(driver, 10)\n    \n        # Prv\u00fd vstup \u2014 aby ste z\u00edskali aktu\u00e1lnu hodnotu pokusov\n    \n        # Login\n        login_input = wait.until(EC.visibility_of_element_located(LOGIN_FIELD_LOCATOR))\n        login_input.clear()\n        login_input.send_keys(LOGIN)\n    \n        # Password\n        password_input = wait.until(EC.visibility_of_element_located(PASSWORD_FIELD_LOCATOR))\n        password_input.clear()\n        password_input.send_keys(INVALID_PASSWORD)\n    \n        # Click button\n        submit_button = wait.until(EC.element_to_be_clickable(SUBMIT_BUTTON_LOCATOR))\n        submit_button.click()\n    \n>       check_account_blocked(wait)\n\ntests/test_auth.py:197: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nwait = <selenium.webdriver.support.wait.WebDriverWait (session=\"1c2a1025a3d946a9d638b859ee0c37b6\")>\n\n    def check_account_blocked(wait):\n        try:\n            # Kontrola dostupnosti chybov\u00fdch spr\u00e1v\n            error_message = wait.until(EC.visibility_of_element_located(ERROR_MESSAGE_LOCATOR))\n            # Zobraz\u00ed sa kontrola, \u010di je spr\u00e1va na popup\n            message_text = error_message.text.strip().lower()\n            # Skontrolujte, \u010di sa spr\u00e1va zhoduje s o\u010dak\u00e1van\u00fdmi\n            if \"\u00fa\u010det bude zablokovan\u00fd\" in message_text:\n>               pytest.fail(f\"\u00fa\u010det bude zablokovan\u00fd: '{message_text}'\")\nE               Failed: \u00fa\u010det bude zablokovan\u00fd: '\u00fa\u010det bude zablokovan\u00fd e\u0161te 16 min.'\n\ntests/test_auth.py:35: Failed"}, "teardown": {"duration": 0.07770199998049065, "outcome": "passed"}}, {"nodeid": "tests/test_languages.py::test_language_switch", "lineno": 21, "outcome": "passed", "keywords": ["test_language_switch", "test_languages.py", "tests", "autotesting", ""], "setup": {"duration": 0.4953747079707682, "outcome": "passed"}, "call": {"duration": 6.668241833976936, "outcome": "passed"}, "teardown": {"duration": 0.0781598329776898, "outcome": "passed"}}]}